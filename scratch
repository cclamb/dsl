
Supported syntax:

Single policy, single activity.  Each policy must have at least one activity, and activities must be tagged:
p = Policy.new do
	activity :play
end


p = Policy.new do
	evaluator :std_eval
	activity :play
end

p = Policy.new :std_eval do
	activity :play
	activity :record do
		constraint { pass }
		constraint { fail }
	end
end

p = Policy.new do
	activity :play do
		constraint do
		
		end
		constraint do
		
		end
		constraint do
		
		end
	end
	activity :record do
		constraint do
		
		end
		constraint do
		
		end
	end
	activity :rewind
	activity :fast_forward
	activity :stop
	activity :pause
end


so this is cool...

ruby-1.9.2-p0 > p=''
 => "" 
ruby-1.9.2-p0 > IO.foreach('policies/simple-policy.rb', 'r') do |line|
ruby-1.9.2-p0 >     p = p + line
ruby-1.9.2-p0 ?>  end
 => nil 
ruby-1.9.2-p0 > puts p
policy :p1 do
  activity :a1 do
	  constraint do
		  puts 'c1'
	  end
	  constraint do
		  puts 'c2'
	  end
  end
end
 => nil 
ruby-1.9.2-p0 > eval(p)
 => #<Policy:0x9c2ecec @ctx=:loaded, @active_activity=nil, @misc_key=2, @defined_activities={:a1=>{0=>#<Proc:0x9c2ec24@(eval):3>, 1=>#<Proc:0x9c2ec10@(eval):6>}}, @artifact=nil, @context=nil> 



New Language?

create arbitrary items and then aggregate?

# Define activity thingys
a1 = activity do
# ...
end

a1 = activity do
# ...
end

a3 = activity do |a|
# ...
end

# ...

a10 = activity { |a,c| true unless a == nil && c == nill }

# Build policy?

p1 = policy do
  constraint_evaluator :conjunctive_eval
  activity_evaluator :disjunctive_eval
  is_activity a3 constrain_by a1, a2
  is_activity a10 constrain_by a1, a5 obligate_with a4, a6, a7
  is_activity a9, :activity_evaluator => :conjunctive_eval constrain_by a1, a8, a3
end

# Build artifact?
artif = artifact do
  define :name => 'foo'
  define :uri => Url.new('http://informatics.ece.unm.edu/thing/11')
end

# associate?
bundle = associate artif, p1

# emit different types of license info?
puts bundle.xrml
puts bundle.cc

# emit to a file, something like
file = # open file....
bundle.xrml do |line|
  file << line
end

bundle.cc do |line|
  file << line
end





	

